// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/transport/rest/handler.go

// Package mock_rest is a generated GoMock package.
package mock_rest

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	models "github.com/zenorachi/image-box/model"
	storage "github.com/zenorachi/image-box/pkg/storage"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// ParseToken mocks base method.
func (m *MockUser) ParseToken(ctx *gin.Context, token string) (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", ctx, token)
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockUserMockRecorder) ParseToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockUser)(nil).ParseToken), ctx, token)
}

// RefreshTokens mocks base method.
func (m *MockUser) RefreshTokens(ctx *gin.Context, refreshToken string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshTokens", ctx, refreshToken)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RefreshTokens indicates an expected call of RefreshTokens.
func (mr *MockUserMockRecorder) RefreshTokens(ctx, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshTokens", reflect.TypeOf((*MockUser)(nil).RefreshTokens), ctx, refreshToken)
}

// SignIn mocks base method.
func (m *MockUser) SignIn(ctx *gin.Context, input models.SignInInput) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, input)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserMockRecorder) SignIn(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUser)(nil).SignIn), ctx, input)
}

// SignUp mocks base method.
func (m *MockUser) SignUp(ctx *gin.Context, input models.SignUpInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserMockRecorder) SignUp(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUser)(nil).SignUp), ctx, input)
}

// MockFile is a mock of File interface.
type MockFile struct {
	ctrl     *gomock.Controller
	recorder *MockFileMockRecorder
}

// MockFileMockRecorder is the mock recorder for MockFile.
type MockFileMockRecorder struct {
	mock *MockFile
}

// NewMockFile creates a new mock instance.
func NewMockFile(ctrl *gomock.Controller) *MockFile {
	mock := &MockFile{ctrl: ctrl}
	mock.recorder = &MockFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFile) EXPECT() *MockFileMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockFile) Get(ctx *gin.Context, userID uint) ([]models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, userID)
	ret0, _ := ret[0].([]models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFileMockRecorder) Get(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFile)(nil).Get), ctx, userID)
}

// Upload mocks base method.
func (m *MockFile) Upload(ctx *gin.Context, userID uint, input storage.UploadInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, userID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockFileMockRecorder) Upload(ctx, userID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockFile)(nil).Upload), ctx, userID, input)
}

// MockAuthHandler is a mock of AuthHandler interface.
type MockAuthHandler struct {
	ctrl     *gomock.Controller
	recorder *MockAuthHandlerMockRecorder
}

// MockAuthHandlerMockRecorder is the mock recorder for MockAuthHandler.
type MockAuthHandlerMockRecorder struct {
	mock *MockAuthHandler
}

// NewMockAuthHandler creates a new mock instance.
func NewMockAuthHandler(ctrl *gomock.Controller) *MockAuthHandler {
	mock := &MockAuthHandler{ctrl: ctrl}
	mock.recorder = &MockAuthHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthHandler) EXPECT() *MockAuthHandlerMockRecorder {
	return m.recorder
}

// refresh mocks base method.
func (m *MockAuthHandler) refresh(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "refresh", ctx)
}

// refresh indicates an expected call of refresh.
func (mr *MockAuthHandlerMockRecorder) refresh(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "refresh", reflect.TypeOf((*MockAuthHandler)(nil).refresh), ctx)
}

// signIn mocks base method.
func (m *MockAuthHandler) signIn(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "signIn", ctx)
}

// signIn indicates an expected call of signIn.
func (mr *MockAuthHandlerMockRecorder) signIn(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "signIn", reflect.TypeOf((*MockAuthHandler)(nil).signIn), ctx)
}

// signUp mocks base method.
func (m *MockAuthHandler) signUp(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "signUp", ctx)
}

// signUp indicates an expected call of signUp.
func (mr *MockAuthHandlerMockRecorder) signUp(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "signUp", reflect.TypeOf((*MockAuthHandler)(nil).signUp), ctx)
}

// MockAuthMiddleware is a mock of AuthMiddleware interface.
type MockAuthMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMiddlewareMockRecorder
}

// MockAuthMiddlewareMockRecorder is the mock recorder for MockAuthMiddleware.
type MockAuthMiddlewareMockRecorder struct {
	mock *MockAuthMiddleware
}

// NewMockAuthMiddleware creates a new mock instance.
func NewMockAuthMiddleware(ctrl *gomock.Controller) *MockAuthMiddleware {
	mock := &MockAuthMiddleware{ctrl: ctrl}
	mock.recorder = &MockAuthMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthMiddleware) EXPECT() *MockAuthMiddlewareMockRecorder {
	return m.recorder
}

// CheckBody mocks base method.
func (m *MockAuthMiddleware) CheckBody() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBody")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CheckBody indicates an expected call of CheckBody.
func (mr *MockAuthMiddlewareMockRecorder) CheckBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBody", reflect.TypeOf((*MockAuthMiddleware)(nil).CheckBody))
}

// CheckJSONSignIn mocks base method.
func (m *MockAuthMiddleware) CheckJSONSignIn() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckJSONSignIn")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CheckJSONSignIn indicates an expected call of CheckJSONSignIn.
func (mr *MockAuthMiddlewareMockRecorder) CheckJSONSignIn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckJSONSignIn", reflect.TypeOf((*MockAuthMiddleware)(nil).CheckJSONSignIn))
}

// CheckJSONSignUp mocks base method.
func (m *MockAuthMiddleware) CheckJSONSignUp() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckJSONSignUp")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CheckJSONSignUp indicates an expected call of CheckJSONSignUp.
func (mr *MockAuthMiddlewareMockRecorder) CheckJSONSignUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckJSONSignUp", reflect.TypeOf((*MockAuthMiddleware)(nil).CheckJSONSignUp))
}

// CheckToken mocks base method.
func (m *MockAuthMiddleware) CheckToken() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CheckToken indicates an expected call of CheckToken.
func (mr *MockAuthMiddlewareMockRecorder) CheckToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockAuthMiddleware)(nil).CheckToken))
}

// MockFileHandler is a mock of FileHandler interface.
type MockFileHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFileHandlerMockRecorder
}

// MockFileHandlerMockRecorder is the mock recorder for MockFileHandler.
type MockFileHandlerMockRecorder struct {
	mock *MockFileHandler
}

// NewMockFileHandler creates a new mock instance.
func NewMockFileHandler(ctrl *gomock.Controller) *MockFileHandler {
	mock := &MockFileHandler{ctrl: ctrl}
	mock.recorder = &MockFileHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileHandler) EXPECT() *MockFileHandlerMockRecorder {
	return m.recorder
}

// get mocks base method.
func (m *MockFileHandler) get(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "get", ctx)
}

// get indicates an expected call of get.
func (mr *MockFileHandlerMockRecorder) get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "get", reflect.TypeOf((*MockFileHandler)(nil).get), ctx)
}

// upload mocks base method.
func (m *MockFileHandler) upload(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "upload", ctx)
}

// upload indicates an expected call of upload.
func (mr *MockFileHandlerMockRecorder) upload(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "upload", reflect.TypeOf((*MockFileHandler)(nil).upload), ctx)
}

// MockFileMiddleware is a mock of FileMiddleware interface.
type MockFileMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockFileMiddlewareMockRecorder
}

// MockFileMiddlewareMockRecorder is the mock recorder for MockFileMiddleware.
type MockFileMiddlewareMockRecorder struct {
	mock *MockFileMiddleware
}

// NewMockFileMiddleware creates a new mock instance.
func NewMockFileMiddleware(ctrl *gomock.Controller) *MockFileMiddleware {
	mock := &MockFileMiddleware{ctrl: ctrl}
	mock.recorder = &MockFileMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileMiddleware) EXPECT() *MockFileMiddlewareMockRecorder {
	return m.recorder
}

// CheckUploadInput mocks base method.
func (m *MockFileMiddleware) CheckUploadInput() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUploadInput")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CheckUploadInput indicates an expected call of CheckUploadInput.
func (mr *MockFileMiddlewareMockRecorder) CheckUploadInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUploadInput", reflect.TypeOf((*MockFileMiddleware)(nil).CheckUploadInput))
}

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// CheckBody mocks base method.
func (m *MockHandler) CheckBody() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBody")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CheckBody indicates an expected call of CheckBody.
func (mr *MockHandlerMockRecorder) CheckBody() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBody", reflect.TypeOf((*MockHandler)(nil).CheckBody))
}

// CheckJSONSignIn mocks base method.
func (m *MockHandler) CheckJSONSignIn() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckJSONSignIn")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CheckJSONSignIn indicates an expected call of CheckJSONSignIn.
func (mr *MockHandlerMockRecorder) CheckJSONSignIn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckJSONSignIn", reflect.TypeOf((*MockHandler)(nil).CheckJSONSignIn))
}

// CheckJSONSignUp mocks base method.
func (m *MockHandler) CheckJSONSignUp() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckJSONSignUp")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CheckJSONSignUp indicates an expected call of CheckJSONSignUp.
func (mr *MockHandlerMockRecorder) CheckJSONSignUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckJSONSignUp", reflect.TypeOf((*MockHandler)(nil).CheckJSONSignUp))
}

// CheckToken mocks base method.
func (m *MockHandler) CheckToken() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckToken")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CheckToken indicates an expected call of CheckToken.
func (mr *MockHandlerMockRecorder) CheckToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckToken", reflect.TypeOf((*MockHandler)(nil).CheckToken))
}

// CheckUploadInput mocks base method.
func (m *MockHandler) CheckUploadInput() gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUploadInput")
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CheckUploadInput indicates an expected call of CheckUploadInput.
func (mr *MockHandlerMockRecorder) CheckUploadInput() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUploadInput", reflect.TypeOf((*MockHandler)(nil).CheckUploadInput))
}

// get mocks base method.
func (m *MockHandler) get(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "get", ctx)
}

// get indicates an expected call of get.
func (mr *MockHandlerMockRecorder) get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "get", reflect.TypeOf((*MockHandler)(nil).get), ctx)
}

// refresh mocks base method.
func (m *MockHandler) refresh(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "refresh", ctx)
}

// refresh indicates an expected call of refresh.
func (mr *MockHandlerMockRecorder) refresh(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "refresh", reflect.TypeOf((*MockHandler)(nil).refresh), ctx)
}

// signIn mocks base method.
func (m *MockHandler) signIn(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "signIn", ctx)
}

// signIn indicates an expected call of signIn.
func (mr *MockHandlerMockRecorder) signIn(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "signIn", reflect.TypeOf((*MockHandler)(nil).signIn), ctx)
}

// signUp mocks base method.
func (m *MockHandler) signUp(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "signUp", ctx)
}

// signUp indicates an expected call of signUp.
func (mr *MockHandlerMockRecorder) signUp(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "signUp", reflect.TypeOf((*MockHandler)(nil).signUp), ctx)
}

// upload mocks base method.
func (m *MockHandler) upload(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "upload", ctx)
}

// upload indicates an expected call of upload.
func (mr *MockHandlerMockRecorder) upload(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "upload", reflect.TypeOf((*MockHandler)(nil).upload), ctx)
}
